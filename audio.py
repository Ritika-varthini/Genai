# -*- coding: utf-8 -*-
"""Audio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jiVo0KJLVl_Hv0E0P3AgN-3VmfXh3fQp
"""

import os
import numpy as np
import librosa
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

data_dir = r"/content/drive/MyDrive/team6"

def extract_features(file_path):
    try:
        audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5)
        mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=13)
        return np.mean(mfccs.T, axis=0)
    except Exception as e:
        print(f"Error extracting features from {file_path}: {e}")
        return None

features = []
lables = []

print(f"Checking directory: {data_dir}")
for folder in os.listdir(data_dir):
    folder_path = os.path.join(data_dir, folder)
    if os.path.isdir(folder_path):
        print(f"Processing folder: {folder_path}")
        emotion = folder.split('_')[-1].lower()
        print(f"Expected emotion: {emotion}")
        for filename in os.listdir(folder_path):
            #print(f"Checking file: {filename}")
            if filename.endswith('.mp3'):
                file_path = os.path.join(folder_path, filename)
                print(f"Attempting to extract features from: {file_path}") # Debugging print
                feature = extract_features(file_path)
                if feature is not None:
                    features.append(feature)
                    lables.append(emotion)
                    print(f"Successfully extracted features from {file_path}") # Debugging print


x = np.array(features)
y = np.array(lables)

print(f"Number of features collected: {len(features)}")
print(f"Number of labels collected: {len(lables)}")

if len(features) > 0: # Add check if any features were collected
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(x_train, y_train)

    y_pred = model.predict(x_test)

    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy:", accuracy_score(y_test, y_pred))
    print("\nclassification_report:\n", {classification_report(y_test, y_pred)})
else:
    print("No features were collected. Cannot train the model.") # Inform user if no features were collected

from google.colab import files
uploaded = files.upload()
def predict_emotion(audio_file):
    feature = extract_features(audio_file)
    if feature is not None:
        feature = feature.reshape(1,-1)
        prediction = model.predict(feature)
        return prediction[0]```````````````````````````````````````````````
    else:
      return "could not process audio"
for fname in uploaded.keys():
  print(f"{fname}: {predict_emotion(fname)}")